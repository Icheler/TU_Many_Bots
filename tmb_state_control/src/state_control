#!/usr/bin/env python3
import os
import roslib
import rospy
import math
import tf
import numpy as np
import geometry_msgs.msg
from geometry_msgs.msg import Point, Pose
from std_msgs.msg import Float32
from tmb_messages.msg import Object_Sighted, State_report
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from std_srvs.srv import Trigger, SetBool


class State_control(object):
    def __init__(self):

        self.blind_robot_detected = False
        self.blind_robot_position = Point()
        self.goal_detected = False
        self.goal_position = Point()
        self.path_exists = False
        self.robot1_pose = Point()
        self.robot2_pose = Point()
        self.dist_robot1_blind_robot = 0
        self.dist_robot2_blind_robot = 0
        self.leader_pose = Point()
        self.state_report = State_report()

        # Initialize Subscribers
        self.sub_detection = rospy.Subscriber('/tmb_perception/object_sighted', Object_Sighted, self.callback_object_detected)
        self.sub_robot1_pose = rospy.Subscriber('/robot1/pose', Pose, self.callback_robot1_pos)
        self.sub_robot2_pose = rospy.Subscriber('/robot2/pose', Pose, self.callback_robot2_pos)

        # Initialize Publishers
        self.pub_state_report = rospy.Publisher('/state_report', State_report,queue_size=10)

    def callback_robot1_pos(self,data):
        self.robot1_pose = data.position

    def callback_robot2_pos(self,data):
        self.robot2_pose = data.position

    def callback_object_detected(self, data):
        
        #Subscribing to tmb_perception target_distance_detector node to get information on object detection 
        
        if data.object_detected == "blind_robot":
            self.blind_robot_detected = True
            self.blind_robot_position = data.object_position_estimate
            self.state_report.blind_robot_detected = True
        if data.object_detected == "goal":
            self.goal_detected = True
            self.goal_position = data.object_position_estimate
            self.goal_detected_by = data.detected_by
            self.state_report.goal_detected = True
        self.pub_state_report.publish(self.state_report)

    def movebase_client(self, robot_name, goal_x, goal_y, wait4it):

        """
            Using the actionlib service, a position is sent to move_base node to guide the robots to the
            desiered destionation. Given the desiered robot's name, goal position ,and a boolian to wait for the 
            service to finish or not, this function requests the service.  
        """

    # Create an action client called "move_base" with action definition file "MoveBaseAction"
        client = actionlib.SimpleActionClient(f'{robot_name}/move_base',MoveBaseAction)
    
    # Waits until the action server has started up and started listening for goals.
        client.wait_for_server()

    # Creates a new goal with the MoveBaseGoal constructor
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
    # Move to goal[x,y] 
        goal.target_pose.pose.position.x = goal_x
        goal.target_pose.pose.position.y = goal_y
    # No rotation of the mobile base frame w.r.t. map frame
        goal.target_pose.pose.orientation.z = -0.6816388
        goal.target_pose.pose.orientation.w = 0.7316889

    # Sends the goal to the action server.
        client.send_goal(goal)
    # Waits for the server to finish performing the action.
        if wait4it:
            wait = client.wait_for_result()

    def choose_leader(self):
        
        """
        Choose the leader based on which robot finds the goal to make sure a path exists
        while guiding the blind robot to the Goal position. Set the proper tmb_follow service names
        accordingly.  
        """

        if self.goal_detected_by == "robot1":
            self.leader = "robot1"
            self.follower = "robot2"
            self.service_leader = "follow_rob1"
        else:
            self.leader = "robot2"
            self.follower = "robot1"
            self.service_leader = "follow_rob2"
    
    def state(self):
        while not(self.blind_robot_detected and self.goal_detected):
            pass
        if self.blind_robot_detected and self.goal_detected:
            #shutdown the explorer nodes
            os.system("rosnode kill /robot1/tmb_explorer")
            os.system("rosnode kill /robot2/tmb_explorer")

            #choose the leader
            self.choose_leader()

            #sends robots close to the blind robot
            self.movebase_client(self.follower,self.blind_robot_position.x-1,self.blind_robot_position.y+2,False)
            self.movebase_client(self.leader,self.blind_robot_position.x+1,self.blind_robot_position.y+2,True)
            self.state_report.robots_in_position = True

            #set leader move_base goal to the Goal
            self.movebase_client(self.leader,self.goal_position.x,self.goal_position.y,False)

            #requests the service from the tmb_follow pkg 
            rospy.wait_for_service(self.service_leader)
            service_lead = rospy.ServiceProxy(self.service_leader, Trigger)
            #blind robot starts following the leader
            req = service_lead()
            print(req)
            self.state_report.follow_procedure_started = True

            #requests the follow_blind service 
            rospy.wait_for_service('follow_blind')
            service_follow = rospy.ServiceProxy('follow_blind', Trigger)
            #follower robot start following blind robot
            req = service_follow()
            print(req)

if __name__ == '__main__':
    rospy.init_node('state_control')
    state_control = State_control()
    state_control.state()
    rospy.spin()

