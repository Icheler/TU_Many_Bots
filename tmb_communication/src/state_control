#!/usr/bin/env python3
import roslaunch
import os
import roslib
import rospy
import math
import tf
import numpy as np
import geometry_msgs.msg
from geometry_msgs.msg import Point, Pose
from std_msgs.msg import Float32
from nav_msgs.msg import OccupancyGrid
import matplotlib.pyplot as plt
from tmb_messages.msg import Object_Sighted
import actionlib
# Brings in the .action file and messages used by the move base action
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal


class State_control(object):
    def __init__(self):

        self.blind_robot_detected = False
        self.blind_robot_position = Point()
        self.goal_detected = False
        self.goal_position = Point()
        self.path_exists = False
        self.goal_x = rospy.get_param('~goal_x')
        self.goal_y = rospy.get_param('~goal_y')

        self.sub_detection = rospy.Subscriber('/tmb_perception/object_sighted', Object_Sighted, self.callback_object_detected)

    def callback_object_detected(self, data):
        if data.object_detected == "robot_blind":
            self.blind_robot_detected = True
            self.blind_robot_position = data.object_position_estimate
        if data.object_detected == "goal":
            self.goal_detected = True
            self.goal_position = data.object_position_estimate


    def movebase_client(self, robot_name, goal_x, goal_y):

    # Create an action client called "move_base" with action definition file "MoveBaseAction"
        client = actionlib.SimpleActionClient(f'{robot_name}/move_base',MoveBaseAction)
    
    # Waits until the action server has started up and started listening for goals.
        client.wait_for_server()

    # Creates a new goal with the MoveBaseGoal constructor
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
    # Move 0.5 meters forward along the x axis of the "map" coordinate frame 
        goal.target_pose.pose.position.x = goal_x
        goal.target_pose.pose.position.y = goal_y
    # No rotation of the mobile base frame w.r.t. map frame
        goal.target_pose.pose.orientation.w = 1.0

    # Sends the goal to the action server.
        client.send_goal(goal)
    # Waits for the server to finish performing the action.
        wait = client.wait_for_result()
    # If the result doesn't arrive, assume the Server is not available
        if not wait:
            rospy.logerr("Action server not available!")
            rospy.signal_shutdown("Action server not available!")
    
    def state(self):
        if self.blind_robot_detected and self.goal_detected:
            os.system("rosnode kill /robot1/tmb_explorer")
            os.system("rosnode kill /robot2/tmb_explorer")

if __name__ == '__main__':
    rospy.init_node('state_control')
    state_control = State_control()
    state_control.state()
    rospy.spin()

